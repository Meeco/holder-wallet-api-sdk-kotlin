/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package me.meeco.holder.wallet.models

import me.meeco.holder.wallet.models.CredentialReceiveGetAccessTokenRequestModelDtoAuthorizationDetailsInner

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param authorizationCode code claimed via authorization code flow. It can to be exchanged for the access token.
 * @param authorizationDetails Contains details about the credentials the Wallet wants to obtain.
 * @param clientId Client identifier in OAuth 2.0
 * @param clientSecret 
 * @param codeChallenge Part of PKCE, used when calling the authorization endpoint.
 * @param codeChallengeMethod Part of PKCE, used when calling the authorization endpoint.
 * @param codeVerifier Part of PKCE, used when calling the token endpoint, together with the authorization code
 * @param credentialIssuer The URL of the Credential Issuer from which the Wallet is requested to obtain one or more Credentials. The authorization server is determined based on the Credential Issuer Metadata.
 * @param grantType 
 * @param issuerState String value identifying a certain processing context at the Credential Issuer. This value is typically provided in the credential offer. When it is, the Wallet MUST send the value back to the Credential Issuer.
 * @param preAuthorizedCode The code representing the authorization to obtain Credentials of a certain type. This parameter MUST be present if the grant_type is urn:ietf:params:oauth:grant-type:pre-authorized_code. Typically provided by the Credential Issuer in the credential offer.
 * @param redirectUri Only relevant when the grant_type is authorization_code.
 * @param scope Request credentials using OAuth 2.0 scope parameter
 * @param state 
 * @param txCode String value containing a Transaction Code. This value MUST be present if a tx_code object was present in the Credential Offer (including if the object was empty).  This parameter MUST only be used if the grant_type is urn:ietf:params:oauth:grant-type:pre-authorized_code.
 */


data class CredentialReceiveGetAccessTokenRequestModelDto (

    /* code claimed via authorization code flow. It can to be exchanged for the access token. */
    @Json(name = "authorization_code")
    val authorizationCode: kotlin.String? = null,

    /* Contains details about the credentials the Wallet wants to obtain. */
    @Json(name = "authorization_details")
    val authorizationDetails: kotlin.collections.List<CredentialReceiveGetAccessTokenRequestModelDtoAuthorizationDetailsInner>? = null,

    /* Client identifier in OAuth 2.0 */
    @Json(name = "client_id")
    val clientId: kotlin.String? = null,

    @Json(name = "client_secret")
    val clientSecret: kotlin.String? = null,

    /* Part of PKCE, used when calling the authorization endpoint. */
    @Json(name = "code_challenge")
    val codeChallenge: kotlin.String? = null,

    /* Part of PKCE, used when calling the authorization endpoint. */
    @Json(name = "code_challenge_method")
    val codeChallengeMethod: kotlin.String? = null,

    /* Part of PKCE, used when calling the token endpoint, together with the authorization code */
    @Json(name = "code_verifier")
    val codeVerifier: kotlin.String? = null,

    /* The URL of the Credential Issuer from which the Wallet is requested to obtain one or more Credentials. The authorization server is determined based on the Credential Issuer Metadata. */
    @Json(name = "credential_issuer")
    val credentialIssuer: kotlin.String? = null,

    /*  */
    @Json(name = "grant_type")
    val grantType: CredentialReceiveGetAccessTokenRequestModelDto.GrantType? = null,

    /* String value identifying a certain processing context at the Credential Issuer. This value is typically provided in the credential offer. When it is, the Wallet MUST send the value back to the Credential Issuer. */
    @Json(name = "issuer_state")
    val issuerState: kotlin.String? = null,

    /* The code representing the authorization to obtain Credentials of a certain type. This parameter MUST be present if the grant_type is urn:ietf:params:oauth:grant-type:pre-authorized_code. Typically provided by the Credential Issuer in the credential offer. */
    @Json(name = "pre-authorized_code")
    val preAuthorizedCode: kotlin.String? = null,

    /* Only relevant when the grant_type is authorization_code. */
    @Json(name = "redirect_uri")
    val redirectUri: kotlin.String? = null,

    /* Request credentials using OAuth 2.0 scope parameter */
    @Json(name = "scope")
    val scope: kotlin.String? = null,

    @Json(name = "state")
    val state: kotlin.String? = null,

    /* String value containing a Transaction Code. This value MUST be present if a tx_code object was present in the Credential Offer (including if the object was empty).  This parameter MUST only be used if the grant_type is urn:ietf:params:oauth:grant-type:pre-authorized_code. */
    @Json(name = "tx_code")
    val txCode: kotlin.String? = null

) {

    /**
     * 
     *
     * Values: authorizationCode,urnColonIetfColonParamsColonOauthColonGrantMinusTypeColonPreMinusAuthorizedCode
     */
    @JsonClass(generateAdapter = false)
    enum class GrantType(val value: kotlin.String) {
        @Json(name = "authorization_code") authorizationCode("authorization_code"),
        @Json(name = "urn:ietf:params:oauth:grant-type:pre-authorized_code") urnColonIetfColonParamsColonOauthColonGrantMinusTypeColonPreMinusAuthorizedCode("urn:ietf:params:oauth:grant-type:pre-authorized_code");
    }
}

