/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package me.meeco.holder.wallet.models

import me.meeco.holder.wallet.models.CredentialOfferDto
import me.meeco.holder.wallet.models.CredentialReceiveGetAccessTokenRequestModelDtoAuthorizationDetailsInnerCredentialDefinition
import me.meeco.holder.wallet.models.CredentialReceiveStateModelDtoProof

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param accessToken 
 * @param authorizationUrl The URL to open in a browser in order to complete the authorization with the Authorization Server.
 * @param cNonce String containing a nonce to be used to create a proof of possession of key material when requesting a Credential
 * @param cNonceExpiresIn Number denoting the lifetime in seconds of the c_nonce.
 * @param clientId Client identifier in OAuth 2.0
 * @param credentialId Id under which the credential is stored in the wallet
 * @param credentialsIds 
 * @param proof 
 * @param credentialDefinition 
 * @param credentialEndpoint Credential Issuer credential endpoint called
 * @param credentialOffer 
 * @param credentialOfferUri 
 * @param did 
 * @param format 
 * @param kid 
 * @param refreshToken 
 * @param responseType This value is always `code`
 * @param state 
 * @param tokenEndpoint Credential Issuer or Authorization Server token endpoint called
 * @param transactionId A string identifying a Deferred Issuance transaction. This claim is contained in the response if the Credential Issuer was unable to immediately issue the Credential
 */


data class CredentialReceiveStateModelDto (

    @Json(name = "access_token")
    val accessToken: kotlin.String? = null,

    /* The URL to open in a browser in order to complete the authorization with the Authorization Server. */
    @Json(name = "authorization_url")
    val authorizationUrl: kotlin.String? = null,

    /* String containing a nonce to be used to create a proof of possession of key material when requesting a Credential */
    @Json(name = "c_nonce")
    val cNonce: kotlin.String? = null,

    /* Number denoting the lifetime in seconds of the c_nonce. */
    @Json(name = "c_nonce_expires_in")
    val cNonceExpiresIn: kotlin.Int? = null,

    /* Client identifier in OAuth 2.0 */
    @Json(name = "client_id")
    val clientId: kotlin.String? = null,

    /* Id under which the credential is stored in the wallet */
    @Json(name = "credential_id")
    val credentialId: kotlin.String? = null,

    @Json(name = "credentials_ids")
    val credentialsIds: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "proof")
    val proof: CredentialReceiveStateModelDtoProof? = null,

    @Json(name = "credential_definition")
    val credentialDefinition: CredentialReceiveGetAccessTokenRequestModelDtoAuthorizationDetailsInnerCredentialDefinition? = null,

    /* Credential Issuer credential endpoint called */
    @Json(name = "credential_endpoint")
    val credentialEndpoint: kotlin.String? = null,

    @Json(name = "credential_offer")
    val credentialOffer: CredentialOfferDto? = null,

    @Json(name = "credential_offer_uri")
    val credentialOfferUri: kotlin.String? = null,

    @Json(name = "did")
    val did: kotlin.String? = null,

    @Json(name = "format")
    val format: CredentialReceiveStateModelDto.Format? = null,

    @Json(name = "kid")
    val kid: kotlin.String? = null,

    @Json(name = "refresh_token")
    val refreshToken: kotlin.String? = null,

    /* This value is always `code` */
    @Json(name = "response_type")
    val responseType: CredentialReceiveStateModelDto.ResponseType? = null,

    @Json(name = "state")
    val state: kotlin.String? = null,

    /* Credential Issuer or Authorization Server token endpoint called */
    @Json(name = "token_endpoint")
    val tokenEndpoint: kotlin.String? = null,

    /* A string identifying a Deferred Issuance transaction. This claim is contained in the response if the Credential Issuer was unable to immediately issue the Credential */
    @Json(name = "transaction_id")
    val transactionId: kotlin.String? = null

) {

    /**
     * 
     *
     * Values: vcPlusSdMinusJwt,jwtVcJson
     */
    @JsonClass(generateAdapter = false)
    enum class Format(val value: kotlin.String) {
        @Json(name = "vc+sd-jwt") vcPlusSdMinusJwt("vc+sd-jwt"),
        @Json(name = "jwt_vc_json") jwtVcJson("jwt_vc_json");
    }
    /**
     * This value is always `code`
     *
     * Values: code
     */
    @JsonClass(generateAdapter = false)
    enum class ResponseType(val value: kotlin.String) {
        @Json(name = "code") code("code");
    }
}

